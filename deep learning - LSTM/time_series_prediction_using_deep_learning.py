# -*- coding: utf-8 -*-
"""Time series prediction using deep learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kQ9TE9jyubEo9YXDuinfHfzmxwFcUbNs
"""

pip install tensorflow

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('service_data.csv',parse_dates=True,index_col='Date')

df.head()

df.plot(figsize=(12,8))

len(df)

len(df) - 60

test_size = 60
test_ind = len(df) - test_size

train = df.iloc[:test_ind]
test = df.iloc[test_ind:]

test.head()

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

scaler.fit(train)

scaled_train = scaler.transform(train)

scaled_test = scaler.transform(test)

from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator

length = 30
generator = TimeseriesGenerator(scaled_train,scaled_train,length=length,batch_size=1)

from tensorflow.keras.models import Sequential

from tensorflow.keras.layers import Dense, LSTM

n_features = 1

model = Sequential()
model.add(LSTM(100,activation='relu',input_shape= (length,n_features)))
model.add(Dense(1))
model.compile(optimizer='adam',loss='mse')

from tensorflow.keras.callbacks import EarlyStopping
early_stop = EarlyStopping(monitor='val_loss',patience =2)

validation_generator = TimeseriesGenerator(scaled_test,scaled_test,length=length,batch_size=1)

model.fit_generator(generator,epochs=100,validation_data=validation_generator,callbacks=[early_stop])

losses = pd.DataFrame(model.history.history)

losses.plot()

test_predictions = []

first_eval_batch = scaled_train[-length:]
current_batch = first_eval_batch.reshape((1,length,n_features))

for i in range(len(test)):
  current_pred = model.predict(current_batch)[0]
  test_predictions.append(current_pred)
  current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)

true_predictions = scaler.inverse_transform(test_predictions)

test['PredictedCount'] = true_predictions

test.tail()

test.plot(figsize=(12,8))

forecast_index = pd.date_range(start='2020-11-02', periods=len(test),freq="D")

forecast_df = pd.DataFrame(data=true_predictions,index=forecast_index,columns=['PredictedCount'])

ax= train.plot()
forecast_df.plot(ax=ax,figsize=(16,8))